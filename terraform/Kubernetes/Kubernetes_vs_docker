# 🐳 Docker vs ☸️ Kubernetes — A Practical DevOps Comparison

## 🔍 Overview

Both **Docker** and **Kubernetes** are essential tools in the DevOps and containerization ecosystem, but they serve different purposes.

---

## 📆 Docker: What Is It?

**Docker** is a containerization platform.

### ✅ Key Features:

* Packages applications with dependencies into containers.
* Ensures consistency across environments (dev/stage/prod).
* Lightweight and fast.
* Runs on a single host (locally or in production).

### 📁 Example

```dockerfile
# Dockerfile
FROM node:18-alpine
WORKDIR /app
COPY . .
RUN npm install
CMD ["node", "index.js"]
```

```bash
# Commands
docker build -t todo-api .
docker run -p 3000:3000 todo-api
```

📌 This runs your app in an isolated container.

---

## ☸️ Kubernetes: What Is It?

**Kubernetes** is a **container orchestration** platform.

### ✅ Key Features:

* Manages many containers across multiple machines (cluster).
* Handles load balancing, self-healing, auto-scaling, and rolling updates.
* Supports declarative deployment with YAML.

---

## ↻ Key Differences

| Feature         | Docker                        | Kubernetes                                  |
| --------------- | ----------------------------- | ------------------------------------------- |
| Purpose         | Containerization              | Container Orchestration                     |
| Scale           | Single host (manually scaled) | Multi-node cluster (auto-scaled)            |
| Load Balancing  | Manual                        | Built-in                                    |
| Self-Healing    | ❌                             | ✅                                           |
| Rolling Updates | ❌ Manual redeployment         | ✅ Built-in strategy                         |
| Networking      | Simple port mapping           | Virtual networking (services, ingress, etc) |
| Learning Curve  | Low                           | Higher                                      |

---

## 🎯 When to Use What?

| Use Case                             | Choose                  |
| ------------------------------------ | ----------------------- |
| Small project or prototype           | Docker                  |
| Local development                    | Docker                  |
| Multi-container distributed system   | Docker + Docker Compose |
| Production at scale (microservices)  | Kubernetes              |
| Need for self-healing & auto-scaling | Kubernetes              |

---

## ⚙️ Kubernetes Example (YAML)

```yaml
# deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: todo-api
  template:
    metadata:
      labels:
        app: todo-api
    spec:
      containers:
      - name: todo-api
        image: yourname/todo-api:latest
        ports:
        - containerPort: 3000
```

```bash
kubectl apply -f deployment.yaml
```

---

## 🚀 Combined Workflow

1. Use **Docker** to build and package your app.
2. Push your image to DockerHub or AWS ECR.
3. Use **Kubernetes** to deploy, scale, and manage containers.

---

## 🧐 Summary

* **Docker**: Good for containerizing applications.
* **Kubernetes**: Good for managing and scaling containers in production.

> 🚀 Use **Docker** to build your spaceship. Use **Kubernetes** to launch and steer it through space.

---

Let me know if you'd like:

* Kubernetes Ingress example
* Helm (K8s package manager)
* Terraform + EKS (Kubernetes on AWS) integration

I'm happy to provide a full DevOps pipeline doc too!
