# üê≥ Docker vs ‚ò∏Ô∏è Kubernetes ‚Äì What‚Äôs the Difference and Why Use Both?

---

## üí™ What Is Docker?

Docker is a **containerization platform**. It lets you:

* Package your app and dependencies into a single, portable container.
* Run apps reliably in different environments (dev/stage/prod).

### ‚úÖ Example:

```Dockerfile
FROM node:18-alpine
WORKDIR /app
COPY . .
RUN npm install
CMD ["node", "index.js"]
```

Build and run it:

```bash
docker build -t todo-api .
docker run -p 3000:3000 todo-api
```

> Great for running **a single container**.

---

## ‚ö†Ô∏è Limitations of Docker Alone

* Can't manage multiple containers easily.
* No built-in scaling, self-healing, or load balancing.
* Hard to manage deployments across many servers.

---

## ‚ò∏Ô∏è What Is Kubernetes?

Kubernetes (K8s) is a **container orchestration system** that:

* Manages containerized apps at scale.
* Handles deployment, scaling, networking, failover, and updates automatically.

---

## üîÅ Real-World Example

### üéØ Goal: Deploy a Node.js App with MongoDB

---

### üî∫ Docker-Only Setup:

**docker-compose.yml**

```yaml
version: '3'
services:
  app:
    build: .
    ports:
      - "3000:3000"
    depends_on:
      - mongo
  mongo:
    image: mongo
    ports:
      - "27017:27017"
```

Run:

```bash
docker-compose up
```

‚úÖ Simple
‚ùå Lacks advanced orchestration

---

### üîπ Kubernetes Setup:

**1. Node.js Deployment**

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: todo
  template:
    metadata:
      labels:
        app: todo
    spec:
      containers:
        - name: todo
          image: yourdockerhub/todo-api
          ports:
            - containerPort: 3000
```

**2. Service for Networking**

```yaml
apiVersion: v1
kind: Service
metadata:
  name: todo-service
spec:
  selector:
    app: todo
  ports:
    - port: 80
      targetPort: 3000
  type: LoadBalancer
```

Deploy with:

```bash
kubectl apply -f deployment.yaml
```

‚úÖ Handles scaling, load balancing, and self-healing automatically.

---

## üîç Docker vs Kubernetes Comparison

| Feature                  | Docker                | Kubernetes           |
| ------------------------ | --------------------- | -------------------- |
| Single container         | ‚úÖ                     | ‚úÖ                    |
| Multi-container support  | ÔøΩ Docker Compose only | ‚úÖ Native             |
| Auto-restart             | ‚ùå Manual              | ‚úÖ Yes                |
| Load balancing           | ‚ùå Manual setup        | ‚úÖ Built-in           |
| Scaling                  | ‚ùå Manual              | ‚úÖ Auto & declarative |
| Rolling updates          | ‚ùå Complex             | ‚úÖ Built-in           |
| Multi-node orchestration | ‚ùå No                  | ‚úÖ Yes                |

---

## ‚úÖ When to Use What?

| Use Case                         | Recommended Tool |
| -------------------------------- | ---------------- |
| Local development                | Docker / Compose |
| Small apps or single server      | Docker           |
| Large-scale apps / production    | Kubernetes (K8s) |
| Auto-scaling & high availability | Kubernetes       |

---

## üß† TL;DR

* **Docker** = "Run a container"
* **Docker Compose** = "Run a few containers together"
* **Kubernetes** = "Manage and scale containers across clusters"

---

> ‚ÑπÔ∏è Want to try Kubernetes? Tools like [minikube](https://minikube.sigs.k8s.io/docs/) or [kind](https://kind.sigs.k8s.io/) help you run Kubernetes locally.
